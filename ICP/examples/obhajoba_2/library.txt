%Block
0
and_bool
logical
%Inputs
a
bool
1
0
b
bool
1
0
%End_Inputs
%Outputs
c
bool
0
1
%End_Outputs
1
%Code
c=a&&b;
%End_code
%End_block
%Block
1
or_bool
logical
%Inputs
a
bool
1
0
b
bool
1
0
%End_Inputs
%Outputs
c
bool
0
1
%End_Outputs
1
%Code
c=a||b;
%End_code
%End_block
%Block
2
and_int
arithmetic
%Inputs
a
int
1
0
b
int
1
0
%End_Inputs
%Outputs
c
int
0
1
%End_Outputs
1
%Code
c=a+b;
%End_code
%End_block
%Block
4
sub_int
arithmetic
%Inputs
a
int
1
0
b
int
1
0
%End_Inputs
%Outputs
c
int
0
1
%End_Outputs
1
%Code
c=a-b;
%End_code
%End_block
%Block
5
mul_int
arithmetic
%Inputs
a
int
1
0
b
int
1
0
%End_Inputs
%Outputs
c
int
0
1
%End_Outputs
1
%Code
c=a*b;
%End_code
%End_block
%Block
3
div_int
arithmetic
%Inputs
a
int
1
0
b
int
1
0
%End_Inputs
%Outputs
c
int
0
1
%End_Outputs
1
%Code
c=a/b;
%End_code
%End_block
%Block
6
And
obhajoba
%Inputs
a
bool
1
0
b
bool
1
0
c
bool
1
0
%End_Inputs
%Outputs
d
bool
0
1
%End_Outputs
0
%Code
*d = a && b && c;
%End_code
%End_block
%Block
7
returnStringAhoj
obhajoba
%Inputs
%End_Inputs
%Outputs
ahoj
string
0
1
%End_Outputs
0
%Code
*ahoj = "Ahoj";
%End_code
%End_block
%Block
8
returnTrue
obhajoba
%Inputs
%End_Inputs
%Outputs
outTrue
bool
0
1
%End_Outputs
0
%Code
*outTrue = true;
%End_code
%End_block
%Block
9
returnFalse
obhajoba
%Inputs
%End_Inputs
%Outputs
outFalse
bool
0
1
%End_Outputs
0
%Code
*outFalse = false;
%End_code
%End_block
%Block
10
returnStringSvete
obhajoba
%Inputs
%End_Inputs
%Outputs
svet
string
0
1
%End_Outputs
0
%Code
*svet = "svete";
%End_code
%End_block
%Block
11
chooseBy
obhajoba
%Inputs
boolean
bool
1
0
in1
string
1
0
in0
string
1
0
%End_Inputs
%Outputs
out
string
0
1
%End_Outputs
0
%Code
if(boolean){  *out = in0;}else{  *out = in1;}
%End_code
%End_block
%Block
12
printString
obhajoba
%Inputs
input
string
1
0
%End_Inputs
%Outputs
%End_Outputs
0
%Code
std::cout << input;
%End_code
%End_block
%Block
13
blok
blok1
%Inputs
in0
bool
1
0
%End_Inputs
%Outputs
%End_Outputs
0
%Code
cout << "ahoj";
%End_code
%End_block
%Block
14
composite0
bool
%Inputs
a
bool
1
0
b
bool
1
0
c
bool
1
0
b
bool
1
0
c
bool
1
0
%End_Inputs
%Outputs
d
bool
0
1
%End_Outputs
0
%Code
*d = a && b && c &&;a=d;*d = a && b && c &&;
%End_code
%End_block
%Block
15
composite1
string
%Inputs
a
bool
1
0
b
bool
1
0
c
bool
1
0
a
bool
1
0
b
bool
1
0
c
bool
1
0
boolean
bool
1
0
in1
string
1
0
in0
string
1
0
%End_Inputs
%Outputs
d
bool
1
0
d
bool
1
0
out
string
1
0
%End_Outputs
0
%Code
*d = a && b && c &&;*d = a && b && c &&;if(boolean){  *out = in0;}else{  *out = in1;}
%End_code
%End_block
%Block
16
composite2
string
%Inputs
a
bool
1
0
b
bool
1
0
c
bool
1
0
boolean
bool
1
0
%End_Inputs
%Outputs
out
string
1
0
%End_Outputs
0
%Code
*d = a && b && c &&;boolean=d;*ahoj = "Ahoj";in0=ahoj;*ahoj = "Ahoj";in1=ahoj;if(boolean){  *out = in0;}else{  *out = in1;}
%End_code
%End_block
%Block
17
empty0

%Inputs
in0
NOTYPE
1
0
in1
NOTYPE
1
0
in2
NOTYPE
1
0
in3
NOTYPE
1
0
in4
NOTYPE
1
0
in5
NOTYPE
1
0
%End_Inputs
%Outputs
%End_Outputs
0
%Code

%End_code
%End_block
%Block
18
empty1

%Inputs
%End_Inputs
%Outputs
%End_Outputs
0
%Code

%End_code
%End_block
